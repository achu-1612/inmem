// Code generated by MockGen. DO NOT EDIT.
// Source: spec.go
//
// Generated by this command:
//
//	mockgen -package inmem -destination spec.mock.go -source spec.go -self_package github.com/achu-1612/inmem
//

// Package inmem is a generated GoMock package.
package inmem

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockCache) Begin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockCacheMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockCache)(nil).Begin))
}

// Clear mocks base method.
func (m *MockCache) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCache)(nil).Clear))
}

// Commit mocks base method.
func (m *MockCache) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockCacheMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCache)(nil).Commit))
}

// Delete mocks base method.
func (m *MockCache) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), key)
}

// Dump mocks base method.
func (m *MockCache) Dump() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(error)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockCacheMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockCache)(nil).Dump))
}

// Get mocks base method.
func (m *MockCache) Get(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Rollback mocks base method.
func (m *MockCache) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockCacheMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockCache)(nil).Rollback))
}

// Set mocks base method.
func (m *MockCache) Set(key string, value any, ttl int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value, ttl)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value, ttl)
}

// Size mocks base method.
func (m *MockCache) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockCacheMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockCache)(nil).Size))
}

// TransactionType mocks base method.
func (m *MockCache) TransactionType() TransactionType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionType")
	ret0, _ := ret[0].(TransactionType)
	return ret0
}

// TransactionType indicates an expected call of TransactionType.
func (mr *MockCacheMockRecorder) TransactionType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionType", reflect.TypeOf((*MockCache)(nil).TransactionType))
}

// MockEviction is a mock of Eviction interface.
type MockEviction struct {
	ctrl     *gomock.Controller
	recorder *MockEvictionMockRecorder
	isgomock struct{}
}

// MockEvictionMockRecorder is the mock recorder for MockEviction.
type MockEvictionMockRecorder struct {
	mock *MockEviction
}

// NewMockEviction creates a new mock instance.
func NewMockEviction(ctrl *gomock.Controller) *MockEviction {
	mock := &MockEviction{ctrl: ctrl}
	mock.recorder = &MockEvictionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEviction) EXPECT() *MockEvictionMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEviction) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockEvictionMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEviction)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockEviction) Get(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEvictionMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEviction)(nil).Get), key)
}

// Put mocks base method.
func (m *MockEviction) Put(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockEvictionMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockEviction)(nil).Put), key, value)
}

// MockShardIndexResolver is a mock of ShardIndexResolver interface.
type MockShardIndexResolver struct {
	ctrl     *gomock.Controller
	recorder *MockShardIndexResolverMockRecorder
	isgomock struct{}
}

// MockShardIndexResolverMockRecorder is the mock recorder for MockShardIndexResolver.
type MockShardIndexResolverMockRecorder struct {
	mock *MockShardIndexResolver
}

// NewMockShardIndexResolver creates a new mock instance.
func NewMockShardIndexResolver(ctrl *gomock.Controller) *MockShardIndexResolver {
	mock := &MockShardIndexResolver{ctrl: ctrl}
	mock.recorder = &MockShardIndexResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardIndexResolver) EXPECT() *MockShardIndexResolverMockRecorder {
	return m.recorder
}

// GetShardIndex mocks base method.
func (m *MockShardIndexResolver) GetShardIndex(key string) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardIndex", key)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetShardIndex indicates an expected call of GetShardIndex.
func (mr *MockShardIndexResolverMockRecorder) GetShardIndex(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardIndex", reflect.TypeOf((*MockShardIndexResolver)(nil).GetShardIndex), key)
}

// MockLFUResource is a mock of LFUResource interface.
type MockLFUResource struct {
	ctrl     *gomock.Controller
	recorder *MockLFUResourceMockRecorder
	isgomock struct{}
}

// MockLFUResourceMockRecorder is the mock recorder for MockLFUResource.
type MockLFUResourceMockRecorder struct {
	mock *MockLFUResource
}

// NewMockLFUResource creates a new mock instance.
func NewMockLFUResource(ctrl *gomock.Controller) *MockLFUResource {
	mock := &MockLFUResource{ctrl: ctrl}
	mock.recorder = &MockLFUResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLFUResource) EXPECT() *MockLFUResourceMockRecorder {
	return m.recorder
}

// Frequency mocks base method.
func (m *MockLFUResource) Frequency() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Frequency")
	ret0, _ := ret[0].(int)
	return ret0
}

// Frequency indicates an expected call of Frequency.
func (mr *MockLFUResourceMockRecorder) Frequency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frequency", reflect.TypeOf((*MockLFUResource)(nil).Frequency))
}

// IncrementFrequency mocks base method.
func (m *MockLFUResource) IncrementFrequency() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementFrequency")
}

// IncrementFrequency indicates an expected call of IncrementFrequency.
func (mr *MockLFUResourceMockRecorder) IncrementFrequency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFrequency", reflect.TypeOf((*MockLFUResource)(nil).IncrementFrequency))
}

// Key mocks base method.
func (m *MockLFUResource) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockLFUResourceMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockLFUResource)(nil).Key))
}

// Set mocks base method.
func (m *MockLFUResource) Set(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *MockLFUResourceMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLFUResource)(nil).Set), arg0)
}

// Value mocks base method.
func (m *MockLFUResource) Value() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockLFUResourceMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockLFUResource)(nil).Value))
}
